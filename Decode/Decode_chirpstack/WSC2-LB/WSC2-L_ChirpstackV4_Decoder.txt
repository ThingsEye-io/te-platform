function decodeUplink(input) {
        return { 
            data: Decode(input.fPort, input.bytes, input.variables)
        };   
}
function Decode(fPort, bytes, variables)  {
	var data = {};
	var decode = {};
	var value;
	var mod=(bytes[33]>>7)&0x01;
	var factor=(bytes[33])&0x0F;	
	var divisor=bytes[34];	 
if(fPort==0x02)
   {
	decode.battery=((bytes[0]<<8 | bytes[1]) & 0x3FFF)/1000;//Battery,units:V
	decode.Payload_Ver=bytes[2];
    decode.rain=(bytes[3]<<24 |bytes[4]<<16 |bytes[5]<<8 | bytes[6])*(factor/divisor);	
	value=bytes[7]<<8 | bytes[8];
	if(bytes[7] & 0x80)
	{value |= 0xFFFF0000;}
    decode.temperature_pro=(value/10).toFixed(2);//DS18B20,temperature
 
	decode.wind_speed=((bytes[9]<<8 | bytes[10])/100).toFixed(2);
    decode.wind_level=bytes[11]<<8 | bytes[12];
    decode.wind_direction=bytes[13]<<8 | bytes[14];
	decode.wind_angle=bytes[15]<<8 | bytes[16];

	decode.humidity=((bytes[17]<<8 | bytes[18])/10).toFixed(1);
	decode.temperature=((bytes[19]<<8 | bytes[20])/10).toFixed(1);
	
	decode.noise=((bytes[21]<<8 | bytes[22])/10).toFixed(1);
    if(mod===0)
	  decode.co2=bytes[23]<<8 | bytes[24];
    else
	{
	  decode.pm2_5=bytes[23]<<8 | bytes[24];
	  decode.pm10=bytes[25]<<8 | bytes[26];
	}
	decode.pressure=((bytes[27]<<8 | bytes[28])/10).toFixed(1);
    decode.illumination=(bytes[29]<<24 |bytes[30]<<16 |bytes[31]<<8 | bytes[32]) >>>0;	
	
	decode.s_flag = (bytes[33]>>6)&0x01;
	decode.i_flag = (bytes[33]>>5)&0x01;
	decode.mod = mod;
	
	decode.A1 = bytes[36]<<8 | bytes[37];
	decode.A2 = bytes[40]<<8 | bytes[41];
	decode.A3 = bytes[44]<<8 | bytes[45];
	decode.A4 = bytes[48]<<8 | bytes[49];
	
	 return decode;
   }

else if(fPort==0x05)
  {
    var sub_band;
    var freq_band;
    var sensor;
    
    if(bytes[0]==0x2E)
       sensor= "WSC2-L";
      
    if(bytes[4]==0xff)
      sub_band="NULL";
    else
      sub_band=bytes[4];
    
    if(bytes[3]==0x01)
      freq_band="EU868";
    else if(bytes[3]==0x02)
      freq_band="US915";
    else if(bytes[3]==0x03)
      freq_band="IN865";
    else if(bytes[3]==0x04)
      freq_band="AU915";
    else if(bytes[3]==0x05)
      freq_band="KZ865";
    else if(bytes[3]==0x06)
      freq_band="RU864";
    else if(bytes[3]==0x07)
      freq_band="AS923";
    else if(bytes[3]==0x08)
      freq_band="AS923_1";
    else if(bytes[3]==0x09)
      freq_band="AS923_2";
    else if(bytes[3]==0x0A)
      freq_band="AS923_3";
     else if(bytes[3]==0x0F)
      freq_band="AS923_4";
    else if(bytes[3]==0x0B)
      freq_band="CN470";
    else if(bytes[3]==0x0C)
      freq_band="EU433";
    else if(bytes[3]==0x0D)
      freq_band="KR920";
    else if(bytes[3]==0x0E)
      freq_band="MA869";
      
    var firm_ver= (bytes[1]&0x0f)+'.'+(bytes[2]>>4&0x0f)+'.'+(bytes[2]&0x0f);
     bat= (bytes[5]<<8 | bytes[6])/1000;
    return {
    SENSOR_MODEL:sensor,
    FIRMWARE_VERSION:firm_ver,
    FREQUENCY_BAND:freq_band,
    SUB_BAND:sub_band,
    battery:bat,
    };
  }
}