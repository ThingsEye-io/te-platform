// decode payload to string
var payloadStr = decodeToString(payload);

// decode payload to JSON
var objdata = {};
var obj1 = {};
var data = decodeToJson(payload);
var deviceName = data.IMEI;
delete data.IMEI;
var modelname = data.Model;
delete data.Model;
var timestamp = new Date().getTime();

for (var key in data) {
if (Numberkey) {
obj1[key] = data[key];
obj1[key][obj1[key].length - 1] = Number(new Date(obj1[key][obj1[key].length - 1]));
} else {
objdata[key] = data[key];
}
}

var listdata = [{ "ts": timestamp, "values": objdata }];

for (var key1 in obj1) {
if (modelname == "SN50V3-NB" && data.mod == 7) {
listdata.push({
"ts": obj1[key1][obj1[key1].length - 1],
"values": {
"temperature": obj1[key1][0],
"humidity": obj1[key1][1],
"adc1": obj1[key1][2],
"DS18B20_Temp": obj1[key1][3]
}
});
} else if (modelname == "PS-NB") {
listdata.push({
"ts": obj1[key1][obj1[key1].length - 1],
"values": {
"idc_intput": obj1[key1][0],
"vdc_intput": obj1[key1][1]
}
});
}
}

var result = {
deviceName: deviceName,
deviceType: modelname,
attributes: {
model: modelname,
customerName: "In-sensus",
groupName: modelname,
integrationName: metadata['integrationName']
},
telemetry: listdata
};

function decodeToString(payload) {
return String.fromCharCode.apply(String, payload);
}

function decodeToJson(payload) {
// convert payload to string
var str = decodeToString(payload);

// parse string to JSON
var data = JSON.parse(str);
return data;
}

return result;